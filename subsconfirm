#!/usr/bin/perl
use warnings;
use strict;
use POSIX qw(strftime);

# Constants
my $VERSION = "1.0";
my $DATAFILE = "subs.csv";
my $DATAFILETEMP = "/tmp/subs.new";
my $rcfilename = "subsconfirm.prefs";
my $DEBUGMODE = "no";
my $EDITOR = "nano";
my $SMTPSENDER = "not\@set.com";
my $CURSTATUS = "";
my $CURPROVIDER = "";
my $CURDOMAIN = "";
my $CUROWNER = "";
my $NOTICEDATE = "";
my $SENDMAIL_COMMAND = "/usr/local/citadel/citmail";
my $MINDAYS = 28;

# ----

print "subsconfirm v$VERSION\n";
print "====================================\n";

if (! -f $DATAFILE)
{
        print "List file $DATAFILE not found, creating it...\n";
        open(FILEOUT, '>', $DATAFILE) or die $!;
        print FILEOUT "# active, provider, domain, email, last sent date\n";
	print FILEOUT "#active,ovh,testdomain.com,serverowner\@somedomain.com,today\n";
        close(FILEOUT);
        exit(0);
}

# See if the EDITOR env var is set, use it if so
if ($ENV{'EDITOR'})
{
        $EDITOR = $ENV{'EDITOR'};
}

sub DebugPrint
{
        if ($DEBUGMODE eq "debug")
        {
                print $_;
        }
}

sub DisplayHelp
{
	print "Unknown option, valid options are:\n";
	print "\tsubsconfirm \[list\]\n";
	print "\t\tlist - Display the entries in the data file\n";
}

sub DisplayList
{
	open(FILEIN, '<', $DATAFILE) or die $!;
	while(<FILEIN>)
	{
	        # print $_;
	        if ((substr($_, 0, 1) eq "#") || ($_ eq ""))
	        {
	                # skip over comments
	                next;
	        }
	        chop();
	        ($CURSTATUS, $CURPROVIDER, $CURDOMAIN, $CUROWNER, $NOTICEDATE) = split(/,/, $_);
	        print "Current Status:\t\t$CURSTATUS\n";
	        print "Current Provider:\t$CURPROVIDER\n";
	        print "Current Domain:\t\t$CURDOMAIN\n";
	        print "Current Owner:\t\t$CUROWNER\n";
		my $humandate = strftime("%Y-%m-%d", $NOTICEDATE);
	        print "Last Send Date:\t\t$humandate\n";
	        print "#################\n";
	}
	close(FILEIN);
	exit 0;
}

my $NumArgs = $#ARGV + 1;
if ($NumArgs > 1)
{
	DisplayHelp();
	exit 0;
}
if ($NumArgs == 1)
{
	if ($ARGV[0] ne "list")
	{
		DisplayHelp();
		exit 0;
	}
	DisplayList();
	exit 0;
}

my $defaultfile = <<'END_TEMPLATE';
# Sender Addr
sender_email
# Get more apps like this at https://marisa-apps.retro-os.live
END_TEMPLATE

if (! -f $rcfilename)
{
        print "Settings file $rcfilename not found, creating it...\n";
        open(FILEOUT, '>', $rcfilename) or die $!;
        print FILEOUT "$defaultfile";
        close(FILEOUT);
        system("$EDITOR $rcfilename");
        exit(0);
}

open(FILEIN, '<', $rcfilename) or die $!;
my $LastLine = 0;
while(<FILEIN>)
{
        # print $_;
        if ((substr($_, 0, 1) eq "#") || ($_ eq ""))
        {
                # skip over comments
                next;
        }
        chop();
        if ($LastLine == 0)
        {
                $SMTPSENDER = $_;
                DebugPrint("saw SMTP Sender '$SMTPSENDER'\n");
                $LastLine++;
                next;
        }
}
close(FILEIN);

sub SendMail
{
	my $MessageBody = <<"END_TEMPLATE";
This is a periodic request to confirm you still want the server "$CURDOMAIN". Please respond to let us know if you still want this server or if we can shut it down.

Thanks for your attention!
---
This is a automated message and may not reflect previous contact.
END_TEMPLATE

	my $MAILTEMP = "/tmp/emailbody.txt";
	open(FILEOUT, '>', $MAILTEMP) or die $!;
        print(FILEOUT "To: $CUROWNER\n");
        print(FILEOUT "From: $SMTPSENDER\n");
        print(FILEOUT "Subject: Regarding your server: $CURDOMAIN\n\n");
        print(FILEOUT $MessageBody);
	close(FILEOUT);
	system("$SENDMAIL_COMMAND $CUROWNER < $MAILTEMP");
}

print "About to start sending - confirm \[y/n\]: ";
my $answer = <STDIN>;
chop($answer);
if (($answer ne "y") && ($answer ne "yes"))
{
	print "Not running update\n";
	exit 0;
}

# Create the temporary file
open(TEMPFILE, '>', $DATAFILETEMP) or die $!;

# Open the data file and start parsing it
open(FILEIN, '<', $DATAFILE) or die $!;
while(<FILEIN>)
{
        # print $_;
        if ((substr($_, 0, 1) eq "#") || ($_ eq ""))
        {
                # skip over comments
		print TEMPFILE "$_";
                next;
        }
        chop();
	($CURSTATUS, $CURPROVIDER, $CURDOMAIN, $CUROWNER, $NOTICEDATE) = split(/,/, $_);
	if ($CURSTATUS ne "active")
	{
		DebugPrint("Skipping $CURDOMAIN\n");
		print TEMPFILE "$_";
		next;
	}
	my $currentdate = localtime;
	if ((($currentdate - $NOTICEDATE) / (60 * 60 * 24)) < $MINDAYS)
	{
		print "Skipping $CURDOMAIN...\n";
		print TEMPFILE "$_";
		next;
	}
	my $date = localtime;
	my $humandate = strftime("%Y-%m-%d", $date);
	print "Current Provider:\t$CURPROVIDER\n";
	print "Current Domain:\t\t$CURDOMAIN\n";
	print "Current Owner:\t\t$CUROWNER\n";
	print "Last Send Date:\t\t$humandate\n";
	SendMail();
	print TEMPFILE "active,$CURPROVIDER,$CURDOMAIN,$CUROWNER,$date\n";
	print "=================\n";
}
close(FILEIN);
close(TEMPFILE);
system ("mv $DATAFILETEMP $DATAFILE");
exit 0;
